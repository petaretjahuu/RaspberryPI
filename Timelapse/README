I wanted to use a Raspberry Pi with a camera to make a timelapse of a construction project. The problem was, the Raspberry Pi wouldn't always be connected to the internet. It would only go online when I was at the construction site and could use my smartphone's internet.

So, I set up the Raspberry Pi to take a picture every 15 seconds and save them separately for each day. When it finally got online, it would use rsync to send all the pictures to my CentOS server. Then, the server would put together the pictures for each day and make them into timelapse videos.

There's also an option to use a regular USB webcam instead of the Raspberry Pi camera module.

By the way, the Raspberry Pi is powered by a 20000 mAh powerbank. This powerbank has power passthrough, which means I can charge it from an outlet on site while also providing power to the Raspberry Pi at the same time.

# Instructions:
## CentOS
Update the system, installs nano, and rsync. Create file for SSH authorization.
```curl -o centos.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/centos.sh && chmod +x centos.sh && sh ./centos.sh```

Create "timelapse" user by running this command:
```curl -o centos_user.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/centos_user.sh && chmod +x centos_user.sh && sh ./centos_user.sh```

## Raspberry PI
Using Buster significantly simplifies the camera setup process.
User "timelapse" with password "timelapse" should be created while creating and writing Buster image to microSD card.
To use camera module, it needs to be enabled through ```sudo raspi-config``` in Interface, while using webcam requires installation of ffmpeg package: ```sudo apt install ffmpeg -y```

Update the system, install rsync and sshpass. Create ssh pass and directory for storing captures:
```curl -o raspberrypi.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/raspberrypi.sh && chmod +x raspberrypi.sh && sh ./raspberrypi.sh```.

Copy generated SSH key from ```~/.ssh/id_rsa.pub``` to CentOS file ```~/.ssh/authorized_keys```.
