THIS IS WORK IN PROGRESS!

I wanted to use a Raspberry Pi with a camera to make a timelapse of a construction project. The problem was, the Raspberry Pi wouldn't always be connected to the internet. It would only go online when I was at the construction site and could use my smartphone's internet.

So, I set up the Raspberry Pi to take a picture every 15 seconds and save them separately for each day. When it finally got online, it would use rsync to send all the pictures to my CentOS server. Then, the server would put together the pictures for each day and make them into timelapse videos.

There's also an option to use a regular USB webcam instead of the Raspberry Pi camera module.

By the way, the Raspberry Pi is powered by a 20000 mAh powerbank. This powerbank has power passthrough, which means I can charge it from an outlet on site while also providing power to the Raspberry Pi at the same time.

# Instructions:
## Router
Create Port Forwarding rule for port 22 rsync uses that port for communication.

## CentOS
These commands should be run as root.

Install SSH server and start the service.
```sudo yum install openssh-server -y && sudo systemctl start sshd```

Create user "timelapse" with password "timelapse", and give it sudo privileges. Delete the script.
```curl -o centos_user.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/centos_user.sh && chmod +x centos_user.sh && sh ./centos_user.sh && sudo rm ./centos_user.sh```

Update the system, install nano and rsync. Create file for SSH authorization. Delete the script and reboot.
```curl -o centos.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/centos.sh && chmod +x centos.sh && sh ./centos.sh && sudo rm ./centos.sh && sudo reboot```

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## Raspberry PI
Using Buster significantly simplifies the camera setup process.
User "timelapse" with password "timelapse" should be created while creating and writing Buster image to microSD card (using [Raspberry Pi Imager](https://www.raspberrypi.com/software/)).
To use camera module, it needs to be enabled in Interface through ```sudo raspi-config```, while using webcam requires installation of ffmpeg package: ```sudo apt install ffmpeg -y```

Update the system, install rsync and sshpass. Create ssh pass and directory for storing captures:
```curl -o raspberrypi.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/raspberrypi.sh && chmod +x raspberrypi.sh && sh ./raspberrypi.sh```.


Copy generated SSH key from ```~/.ssh/id_rsa.pub``` to CentOS file ```~/.ssh/authorized_keys```.

## Scripts
At this point, installation scripts can be removed:
sudo rm centos.sh centos_user.sh raspberrypi.sh

Create directory to store timelapse scripts:
mkdir -p /home/timelapse/scripts && chmod ugo+rwx /home/timelapse/scripts

Download script for capturing images:
curl -o /home/timelapse/scripts/capture.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/scripts/capture.sh && chmod +x capture.sh

Download script for uploading images:
curl -o /home/timelapse/scripts/upload.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/scripts/upload.sh && chmod +x upload.sh

Download script for deleting old images:
curl -o /home/timelapse/scripts/delete.sh https://raw.githubusercontent.com/petaretjahuu/RaspberryPI/main/Timelapse/scripts/delete.sh && chmod +x delete.sh

## Cron jobs
Open cron configuration with command ```crontab -e``` and add following to the end of file:
* * * * * sh /home/tlapse/capture.sh
* * * * * sleep 15 && sh /home/tlapse/capture.sh
* * * * * sleep 30 && sh /home/tlapse/capture.sh
* * * * * sleep 45 && sh /home/tlapse/capture.sh
* * * * * sh /home/tlapse/upload.sh
0 3 * * * sh /home/tlapse/delete.sh

This runs capture.sh every 15 seconds. First capture.sh is ran immediately, second waits for 15 seconds to be ran, third 30 seconds, and last 45 seconds.

